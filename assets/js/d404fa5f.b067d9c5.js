"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4007],{51482:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var a=t(85893),o=t(11151);const s={},r="MongoDB & Atlas Vector Search",c={id:"mongodb",title:"MongoDB & Atlas Vector Search",description:"The MongoDB RAG framework uses MongoDB Atlas as its data layer.",source:"@site/docs/mongodb.md",sourceDirName:".",slug:"/mongodb",permalink:"/chatbot/mongodb",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb/chatbot/tree/main/docs/docs/mongodb.md",tags:[],version:"current",frontMatter:{},sidebar:"main",previous:{title:"Quick Start",permalink:"/chatbot/quick-start"},next:{title:"Configure the Ingest CLI",permalink:"/chatbot/ingest/configure"}},d={},i=[{value:"Set up",id:"set-up",level:2},{value:"1. Create a MongoDB Atlas Cluster",id:"1-create-a-mongodb-atlas-cluster",level:3},{value:"2. Create Database",id:"2-create-database",level:3},{value:"3. Create Atlas Vector Search Index",id:"3-create-atlas-vector-search-index",level:3},{value:"4. Create Other Database Indexes (optional)",id:"4-create-other-database-indexes-optional",level:3},{value:"Database Schema",id:"database-schema",level:2},{value:"<code>pages</code> Collection",id:"pages-collection",level:3},{value:"<code>embedded_content</code> Collection",id:"embedded_content-collection",level:3},{value:"<code>ingest_meta</code> Collection",id:"ingest_meta-collection",level:3},{value:"<code>conversations</code> Collection",id:"conversations-collection",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"mongodb--atlas-vector-search",children:"MongoDB & Atlas Vector Search"}),"\n",(0,a.jsx)(n.p,{children:"The MongoDB RAG framework uses MongoDB Atlas as its data layer."}),"\n",(0,a.jsx)(n.p,{children:"This page explains how to set up MongoDB Atlas and Atlas Vector Search for use with the MongoDB RAG framework, and what is stored in all the collections."}),"\n",(0,a.jsx)(n.h2,{id:"set-up",children:"Set up"}),"\n",(0,a.jsx)(n.h3,{id:"1-create-a-mongodb-atlas-cluster",children:"1. Create a MongoDB Atlas Cluster"}),"\n",(0,a.jsxs)(n.p,{children:["To create a MongoDB Atlas cluster, follow the instructions in the ",(0,a.jsx)(n.a,{href:"https://mongodb.com/docs/atlas/getting-started/",children:"MongoDB Atlas documentation"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"2-create-database",children:"2. Create Database"}),"\n",(0,a.jsx)(n.p,{children:"By convention, we keep all data in the same MongoDB database."}),"\n",(0,a.jsx)(n.p,{children:"However, you could theoretically use separate databases for collections, if you want to."}),"\n",(0,a.jsx)(n.p,{children:"You can give the database any name you want.\nYou pass the name as a variable throughout the RAG framework."}),"\n",(0,a.jsx)(n.h3,{id:"3-create-atlas-vector-search-index",children:"3. Create Atlas Vector Search Index"}),"\n",(0,a.jsxs)(n.p,{children:["In your database create a collection called ",(0,a.jsx)(n.code,{children:"embedded_content"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Then, create the following Atlas Vector Search index on the ",(0,a.jsx)(n.code,{children:"embedded_content"})," collection:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n  "mappings": {\n    "fields": {\n      "embedding": {\n        "dimensions": 1536,\n        "similarity": "cosine",\n        "type": "knnVector"\n      }\n    }\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["To learn how to create an Atlas Vector Search Index, refer to\n",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/atlas/atlas-search/field-types/knn-vector/",children:"How to Index Vector Embeddings for Vector Search"}),"\nin the MongoDB Atlas documentation."]}),"\n",(0,a.jsx)(n.h3,{id:"4-create-other-database-indexes-optional",children:"4. Create Other Database Indexes (optional)"}),"\n",(0,a.jsx)(n.p,{children:"You don't need to create these indexes, to have a working application,\nbut they greatly improve data ingest performance."}),"\n",(0,a.jsxs)(n.p,{children:["On the ",(0,a.jsx)(n.code,{children:"pages"})," collection:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"{ sourceName: 1, url: 1 },\n"})}),"\n",(0,a.jsxs)(n.p,{children:["On the ",(0,a.jsx)(n.code,{children:"embedded_content"})," collection:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// Note that the `embedding` field is indexed separately using Atlas Vector Search.\n{ sourceName: 1, url: 1 },\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For more information on how to create MongoDB indexes, refer to ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/core/indexes/create-index/",children:"Create an Index"})," in the MongoDB Server documentation."]}),"\n",(0,a.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,a.jsx)(n.p,{children:"It has the following collections:"}),"\n",(0,a.jsxs)(n.h3,{id:"pages-collection",children:[(0,a.jsx)(n.code,{children:"pages"})," Collection"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"pages"})," collection holds the plain text version of the content that is later chunked and embedded."]}),"\n",(0,a.jsx)(n.p,{children:"Document schema:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'/**\n  Represents a document stored in the `pages` collection.\n */\ntype Page = {\n  _id: ObjectId;\n  /**\n    The URL of the page.\n   */\n  url: string;\n\n  /**\n    A human-readable title.\n   */\n  title?: string;\n\n  /**\n    The text of the page.\n   */\n  body: string;\n\n  format: PageFormat;\n\n  /**\n    Data source name.\n   */\n  sourceName: string;\n\n  /**\n    Arbitrary metadata for page.\n   */\n  metadata?: PageMetadata;\n\n  /**\n    Last updated.\n   */\n  updated: Date;\n\n  /**\n    The action upon last update.\n   */\n  action: PageAction;\n};\n\nexport type PageMetadata = {\n  /**\n    Arbitrary tags.\n   */\n  tags?: string[];\n  [k: string]: unknown;\n};\n\nexport type PageFormat = "md" | "txt" | "openapi-yaml";\n\nexport type PageAction = "created" | "updated" | "deleted";\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"embedded_content-collection",children:[(0,a.jsx)(n.code,{children:"embedded_content"})," Collection"]}),"\n",(0,a.jsxs)(n.p,{children:["The ``collection holds the content that is queried by Atlas Vector Search.\nIt is generated with the ingest CLI",(0,a.jsx)(n.code,{children:"embed"}),"command from the data in the",(0,a.jsx)(n.code,{children:"pages"})," collection."]}),"\n",(0,a.jsx)(n.p,{children:"Document schema:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"/**\n  Represents a document stored in the `embedded_content` collection.\n */\ntype EmbeddedContent = {\n  _id: ObjectId;\n  /**\n    The URL of the page where the content comes from.\n   */\n  url: string;\n\n  /**\n    The name of the data source the page was loaded from.\n   */\n  sourceName: string;\n\n  /**\n    The text represented by the vector embedding.\n   */\n  text: string;\n\n  /**\n    The number of embedding tokens in the content.\n   */\n  tokenCount: number;\n\n  /**\n    The vector embedding of the text.\n   */\n  embedding: number[];\n\n  /**\n    The date the content was last updated.\n   */\n  updated: Date;\n\n  /**\n    Arbitrary metadata associated with the content. If the content text has\n    metadata in Front Matter format, this metadata should match that metadata.\n   */\n  metadata?: { tags?: string[]; [k: string]: unknown };\n\n  /**\n    The order of the chunk if this content was chunked from a larger page.\n   */\n  chunkIndex?: number;\n\n  /**\n    Non-cryptographic hash of the actual chunking function (and its options)\n    used to produce this chunk. Used to detect whether the chunk should be\n    updated because the function or options have changed.\n   */\n  chunkAlgoHash?: string;\n};\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"ingest_meta-collection",children:[(0,a.jsx)(n.code,{children:"ingest_meta"})," Collection"]}),"\n",(0,a.jsxs)(n.p,{children:["Stores metadata related to the ingest CLI. Currently, this a singleton collection\nthat stores one document related to the ingest CLI's ",(0,a.jsx)(n.code,{children:"all"})," command."]}),"\n",(0,a.jsx)(n.p,{children:"Document schema:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"/**\n  Represents a document stored in the `ingest_meta` collection.\n */\ntype IngestMetaEntry = {\n  _id: string;\n  lastIngestDate: Date;\n};\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"conversations-collection",children:[(0,a.jsx)(n.code,{children:"conversations"})," Collection"]}),"\n",(0,a.jsx)(n.p,{children:"Stores user conversations with the chatbot from the chat server."}),"\n",(0,a.jsx)(n.p,{children:"Document schema:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'/**\n  Represents a document stored in the `conversations` collection.\n */\nexport interface Conversation {\n  _id: ObjectId;\n  /** Messages in the conversation. */\n  messages: Message[];\n  /** The IP address of the user performing the conversation. */\n  ipAddress: string;\n  /** The date the conversation was created. */\n  createdAt: Date;\n  /** The hostname that the request originated from. */\n  requestOrigin?: string;\n}\n\nexport type Message = {\n  /**\n    Unique identifier for the message.\n   */\n  id: ObjectId;\n\n  /**\n    The role of the message in the conversation.\n   */\n  role: OpenAiMessageRole;\n\n  /**\n    Message that occurs in the conversation.\n   */\n  content: string;\n\n  /**\n    The date the message was created.\n   */\n  createdAt: Date;\n};\n\nexport type SystemMessage = Message & {\n  role: "system";\n};\n\nexport type AssistantMessage = Message & {\n  role: "assistant";\n\n  /**\n    Set to `true` if the user liked the response, `false` if the user didn\'t\n    like the response. No value if user didn\'t rate the response. Note that only\n    messages with `role: "assistant"` can be rated.\n   */\n  rating?: boolean;\n\n  /**\n    Further reading links for the message.\n   */\n  references: References;\n};\n\nexport type UserMessage = Message & {\n  role: "user";\n\n  /**\n    The preprocessed content of the message that is sent to vector search.\n   */\n  preprocessedContent?: string;\n\n  /**\n    Whether preprocessor suggested not to answer based on the input.\n   */\n  rejectQuery?: boolean;\n\n  /**\n    The vector representation of the message content.\n   */\n  embedding: number[];\n};\n\n/**\n  Message in the {@link Conversation} as stored in the database.\n */\nexport type SomeMessage = UserMessage | AssistantMessage | SystemMessage;\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>r});var a=t(67294);const o={},s=a.createContext(o);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);