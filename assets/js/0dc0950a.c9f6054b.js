"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6321],{57018:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>a,frontMatter:()=>d,metadata:()=>o,toc:()=>h});var s=n(85893),r=n(11151);const d={},i="Chat UI",o={id:"ui",title:"Chat UI",description:"The MongoDB Chatbot UI is a React.js component library that you can use to build a chatbot UI.",source:"@site/docs/ui.md",sourceDirName:".",slug:"/ui",permalink:"/chatbot/ui",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb/chatbot/tree/main/docs/docs/ui.md",tags:[],version:"current",frontMatter:{},sidebar:"main",previous:{title:"Evaluate Chatbot Responses",permalink:"/chatbot/server/evaluate"},next:{title:"API Reference",permalink:"/chatbot/reference/"}},c={},h=[{value:"Install",id:"install",level:2},{value:"Use the Component",id:"use-the-component",level:2},{value:"Props",id:"props",level:3},{value:"Chatbot Root Component",id:"chatbot-root-component",level:4},{value:"Trigger: Floating Action Button",id:"trigger-floating-action-button",level:4},{value:"Trigger: Input Bar",id:"trigger-input-bar",level:4},{value:"View: Modal Window",id:"view-modal-window",level:4}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components},{Details:d}=t;return d||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"chat-ui",children:"Chat UI"}),"\n",(0,s.jsx)(t.p,{children:"The MongoDB Chatbot UI is a React.js component library that you can use to build a chatbot UI."}),"\n",(0,s.jsx)(t.p,{children:"Currently, it's focused on internal MongoDB use cases. However, we may make it more generic in the future if there is sufficient external interest."}),"\n",(0,s.jsxs)(d,{children:[(0,s.jsx)("summary",{children:" Demo GIF "}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Chatbot UI Demo GIF",src:n(30817).Z+"",width:"1308",height:"1054"})})]}),"\n",(0,s.jsx)(t.h2,{id:"install",children:"Install"}),"\n",(0,s.jsxs)(t.p,{children:["Install the ",(0,s.jsx)(t.code,{children:"mongodb-chatbot-ui"})," package from npm. This contains the React.js components that you can use to build a chatbot UI."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"npm install mongodb-chatbot-ui\n"})}),"\n",(0,s.jsx)(t.h2,{id:"use-the-component",children:"Use the Component"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'import Chatbot, {\n  FloatingActionButtonTrigger,\n  ModalView,\n} from "mongodb-chatbot-ui";\n\nfunction MyApp() {\n  return (\n    <div>\n      <Chatbot>\n        <FloatingActionButtonTrigger text="My MongoDB AI" />\n        <ModalView\n          initialMessageText="Welcome to MongoDB AI Assistant. What can I help you with?"\n          initialMessageSuggestedPrompts={[\n            "How do I create a new MongoDB Atlas cluster?",\n            "Can MongoDB store lists of data?",\n            "How does vector search work?",\n          ]}\n        />\n      </Chatbot>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"props",children:"Props"}),"\n",(0,s.jsx)(t.h4,{id:"chatbot-root-component",children:"Chatbot Root Component"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"<Chatbot />"})," component is effectively a React context provider that wraps your chatbot. It accepts the following props:"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Prop"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Default"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"darkMode"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"boolean?"})}),(0,s.jsxs)(t.td,{children:["If ",(0,s.jsx)(t.code,{children:"true"}),", the UI renders in dark mode. This overrides any theme ",(0,s.jsx)(t.code,{children:"darkMode"})," setting."]}),(0,s.jsxs)(t.td,{children:["The user's OS preference or theme value of ",(0,s.jsx)(t.code,{children:"darkMode"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"serverBaseUrl"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"string?"})}),(0,s.jsx)(t.td,{children:"The base URL for the Chatbot API."}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"https://knowledge.mongodb.com/api/v1"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"shouldStream"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"boolean?"})}),(0,s.jsxs)(t.td,{children:["If ",(0,s.jsx)(t.code,{children:"true"}),", responses are streamed with SSE. Otherwise the entire response is awaited."]}),(0,s.jsxs)(t.td,{children:["If the browser supports SSE, ",(0,s.jsx)(t.code,{children:"true"}),", else ",(0,s.jsx)(t.code,{children:"false"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"tck"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"string?"})}),(0,s.jsx)(t.td,{children:"An analytics identifier to add to the end of all hyperlinks."}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:'"docs_chatbot"'})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"user"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"{ name: string; }?"})}),(0,s.jsx)(t.td,{children:"An object with information about the current user (if there is one)."}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"undefined"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"children"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"React.ReactElement"})}),(0,s.jsxs)(t.td,{children:["Trigger and View components for the chatbot, e.g. ",(0,s.jsx)(t.code,{children:"FloatingActionButtonTrigger"})," and ",(0,s.jsx)(t.code,{children:"ModalView"}),"."]}),(0,s.jsx)(t.td,{})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"trigger-floating-action-button",children:"Trigger: Floating Action Button"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"<FloatingActionButtonTrigger />"})," component opens the Chatbot View when clicked. It accepts the following props:"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Prop"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Default"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"darkMode"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"boolean?"})}),(0,s.jsxs)(t.td,{children:["If ",(0,s.jsx)(t.code,{children:"true"}),", this renders in dark mode. This overrides any theme or provider ",(0,s.jsx)(t.code,{children:"darkMode"})," setting."]}),(0,s.jsxs)(t.td,{children:["The user's OS preference or theme value of ",(0,s.jsx)(t.code,{children:"darkMode"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"text"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"string?"})}),(0,s.jsx)(t.td,{children:"The text shown in the floating action button."}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:'"MongoDB AI"'})})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"trigger-input-bar",children:"Trigger: Input Bar"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"<InputBarTrigger />"})," component opens the Chatbot View when the user sends their first message. It accepts the following props:"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Prop"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Default"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"darkMode"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"boolean?"})}),(0,s.jsxs)(t.td,{children:["If ",(0,s.jsx)(t.code,{children:"true"}),", this renders in dark mode. This overrides any theme or provider ",(0,s.jsx)(t.code,{children:"darkMode"})," setting."]}),(0,s.jsxs)(t.td,{children:["The user's OS preference or theme value of ",(0,s.jsx)(t.code,{children:"darkMode"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"suggestedPrompts"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"string[]?"})}),(0,s.jsx)(t.td,{children:"A list of suggested prompts that appear in the input bar dropdown menu."}),(0,s.jsx)(t.td,{children:"If no prompts are specified, the dropdown is not shown."})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"view-modal-window",children:"View: Modal Window"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"<ModalView />"})," component renders a chat message feed in a modal window. It accepts the following props:"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Prop"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Default"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"darkMode"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"boolean?"})}),(0,s.jsxs)(t.td,{children:["If ",(0,s.jsx)(t.code,{children:"true"}),", this renders in dark mode. This overrides any theme or provider ",(0,s.jsx)(t.code,{children:"darkMode"})," setting."]}),(0,s.jsxs)(t.td,{children:["The user's OS preference or theme value of ",(0,s.jsx)(t.code,{children:"darkMode"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"initialMessageSuggestedPrompts"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"string[]?"})}),(0,s.jsx)(t.td,{children:"A list of suggested prompts that appear alongside the initial assistant message."}),(0,s.jsx)(t.td,{children:"If no prompts are specified, then no prompts are shown."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"initialMessageText"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"string?"})}),(0,s.jsx)(t.td,{children:"The text content of an initial assistant message at the top of the message feed."}),(0,s.jsx)(t.td,{children:"If no text is specified, then no message is shown."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"showDisclaimer"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"boolean?"})}),(0,s.jsx)(t.td,{children:"Controls whether or not to show a disclaimer about AI content above the message feed."}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"false"})})]})]})]})]})}function a(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},30817:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/ui-demo-a98c96aafb77d876d00364d1fa4510b1.gif"},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>i});var s=n(67294);const r={},d=s.createContext(r);function i(e){const t=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(d.Provider,{value:t},e.children)}}}]);